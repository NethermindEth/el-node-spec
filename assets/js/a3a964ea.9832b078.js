"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3687],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={title:"The UID importance"},o=void 0,l={unversionedId:"graft/the-uid-importance",id:"graft/the-uid-importance",title:"The UID importance",description:"The uid property is a unique string identifier inside the Grafana database. The good usage of this property is important because all the relations between objects (folder \u2194\xa0panel \u2194\xa0dashboard \u2194\xa0datasource) uses this property. The user has the power to define these properties while initializing any of the objects. Take in mind that the uid is a value that will present in the backup files that the end user will import on its Grafana instance, so a good name pattern is useful to avoid collisions between multiple AVS collections, we propose to use this name pattern:",source:"@site/docs/graft/the-uid-importance.md",sourceDirName:"graft",slug:"/graft/the-uid-importance",permalink:"/docs/graft/the-uid-importance",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/graft/the-uid-importance.md",tags:[],version:"current",frontMatter:{title:"The UID importance"},sidebar:"sidebar",previous:{title:"Demo",permalink:"/docs/graft/demo"}},p={},s=[],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"uid")," property is a unique ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," identifier inside the Grafana database. The good usage of this property is important because all the relations between objects (folder \u2194\xa0panel \u2194\xa0dashboard \u2194\xa0datasource) uses this property. The user has the power to define these properties while initializing any of the objects. Take in mind that the ",(0,a.kt)("inlineCode",{parentName:"p"},"uid")," is a value that will present in the backup files that the end user will import on its Grafana instance, so a good name pattern is useful to avoid collisions between multiple AVS collections, we propose to use this name pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"el-[avs]-[type]-[name]\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"avs")," is the Node project name, e.g.: ",(0,a.kt)("inlineCode",{parentName:"li"},"eigenDA")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type")," is the type of the object: ",(0,a.kt)("inlineCode",{parentName:"li"},"folder"),",   ",(0,a.kt)("inlineCode",{parentName:"li"},"datasource"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"dashboard"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"panel"))))}d.isMDXComponent=!0}}]);