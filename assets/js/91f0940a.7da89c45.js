"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5620],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,h=p["".concat(s,".").concat(g)]||p[g]||d[g]||o;return n?i.createElement(h,a(a({ref:t},u),{},{components:n})):i.createElement(h,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={title:"Introduction"},a=void 0,l={unversionedId:"plugin/intro",id:"plugin/intro",title:"Introduction",description:"The plugin system will provide a way to extend the AVS setup wizard tool with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that a Node could have. Each Node could provide a plugin to extend the setup tool with avs-specific functionalities interacting with the services declared in the docker-compose setup.",source:"@site/docs/plugin/intro.mdx",sourceDirName:"plugin",slug:"/plugin/intro",permalink:"/docs/plugin/intro",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/plugin/intro.mdx",tags:[],version:"current",frontMatter:{title:"Introduction"},sidebar:"sidebar",previous:{title:"Plugin",permalink:"/docs/category/plugin"},next:{title:"Keys Management",permalink:"/docs/category/keys-management"}},s={},c=[{value:"Plugin as a Docker image",id:"plugin-as-a-docker-image",level:2},{value:"Declaring plugin source",id:"declaring-plugin-source",level:2},{value:"Running the plugin",id:"running-the-plugin",level:2},{value:"Accessing the Nodes",id:"accessing-the-nodes",level:2}],u=(p="NotCLIDisclaimer",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const d={toc:c},g="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The plugin system will provide a way to extend the ",(0,r.kt)("a",{parentName:"p",href:"../wizard/intro"},"AVS setup wizard tool")," with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that a Node could have. Each Node could provide a plugin to extend the setup tool with avs-specific functionalities interacting with the services declared in the docker-compose setup."),(0,r.kt)("h2",{id:"plugin-as-a-docker-image"},"Plugin as a Docker image"),(0,r.kt)("p",null,"A plugin is a Docker container created from a Docker image provided in the Node package. The image could be provided following these two options:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Pre-built image"),(0,r.kt)("li",{parentName:"ol"},"Built from a Dockerfile using a Git repository URL")),(0,r.kt)("h2",{id:"declaring-plugin-source"},"Declaring plugin source"),(0,r.kt)("p",null,"The plugin source is declared in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packaging/manifest#plugin"},"manifest file")," and could be overridden in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packaging/profiles#plugin_overrides"},"profile file")," if necessary."),(0,r.kt)("h2",{id:"running-the-plugin"},"Running the plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"eigenlayer plugin [--avs [avs-name]] [plugin-name] [args...]\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)(u,{mdxType:"NotCLIDisclaimer"})),(0,r.kt)("p",null,"When the user runs the plugin, a container is created using the plugin image, and all the arguments specified by the user in the command are appended to the container ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},"ENTRYPOINT"),". The setup tool would run the container plugin instance and waits until it finishes, showing container logs. The exit code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"eigenlayer plugin")," command is the same exit code of the container plugin and will be printed in stdout to end-user knowledge."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--avs")," flag could be used to specify target AVS. Will be required if multiple profiles of the same Node are running, if only one profile is running then the tool would use it as the target."),(0,r.kt)("h2",{id:"accessing-the-nodes"},"Accessing the Nodes"),(0,r.kt)("p",null,"The plugin container will be executed in the same docker network as the Node instance. This means that the plugin container will be able to access the Nodes, and it can use the Docker name resolution to access the services using the service names defined in the docker-compose file. It is the responsibility of the Developer to use proper service names and include all the necessary functionalities in the docker-compose file to allow the plugin to do all the actions properly."))}h.isMDXComponent=!0}}]);