"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[883],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,g=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return n?i.createElement(g,a(a({ref:t},u),{},{components:n})):i.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={title:"Introduction"},a=void 0,l={unversionedId:"spec/plugin/intro",id:"spec/plugin/intro",title:"Introduction",description:"The plugin system will provide a way to extend the AVS setup wizard tool with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that an AVS Node could have. Each AVS Node could provide a plugin to extend the setup tool with AVS-specific functionalities interacting with the services declared in the docker-compose setup.",source:"@site/docs/spec/plugin/intro.mdx",sourceDirName:"spec/plugin",slug:"/spec/plugin/intro",permalink:"/docs/spec/plugin/intro",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/spec/plugin/intro.mdx",tags:[],version:"current",frontMatter:{title:"Introduction"},sidebar:"sidebar",previous:{title:"Plugin",permalink:"/docs/category/plugin"},next:{title:"AVS Setup Wizard",permalink:"/docs/category/avs-setup-wizard"}},s={},c=[{value:"Plugin as a Docker image",id:"plugin-as-a-docker-image",level:2},{value:"Declaring plugin source",id:"declaring-plugin-source",level:2},{value:"Running the plugin",id:"running-the-plugin",level:2},{value:"Accessing the AVS Nodes",id:"accessing-the-avs-nodes",level:2},{value:"Plugin use cases:",id:"plugin-use-cases",level:2}],u=(p="NotCLIDisclaimer",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const d={toc:c},h="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The plugin system will provide a way to extend the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/avs-setup-wizard"},"AVS setup wizard tool")," with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that an AVS Node could have. Each AVS Node could provide a plugin to extend the setup tool with AVS-specific functionalities interacting with the services declared in the docker-compose setup."),(0,r.kt)("h2",{id:"plugin-as-a-docker-image"},"Plugin as a Docker image"),(0,r.kt)("p",null,"A plugin is a Docker container created from a pre-built Docker image provided locally or in a Docker registry. "),(0,r.kt)("p",null,"The plugin ",(0,r.kt)("strong",{parentName:"p"},"MUST")," have the following requirement:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Docker image ",(0,r.kt)("strong",{parentName:"li"},"MUST")," have an ",(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},"ENTRYPOINT")," that will be executed when the plugin is run."),(0,r.kt)("li",{parentName:"ul"},"The Docker container ",(0,r.kt)("strong",{parentName:"li"},"MUST")," not expect input from the user. All the input ",(0,r.kt)("strong",{parentName:"li"},"MUST")," be provided as arguments in the ",(0,r.kt)("inlineCode",{parentName:"li"},"eigenlayer plugin")," command. There is ongoing work to allow the plugin to interact with the user using stdin/stdout.")),(0,r.kt)("p",null,"The plugin ",(0,r.kt)("strong",{parentName:"p"},"SHOULD")," have the following requirement:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Docker image ",(0,r.kt)("strong",{parentName:"li"},"SHOULD")," have a ",(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/builder/#cmd"},"CMD")," that will be used as the default command when the plugin is run without arguments."),(0,r.kt)("li",{parentName:"ul"},"The Plugin Docker image can share code with the AVS Node Docker image. In this case, the plugin Docker image ",(0,r.kt)("strong",{parentName:"li"},"SHOULD")," be different from the AVS Node Docker image. AVS developers ",(0,r.kt)("strong",{parentName:"li"},"SHOULD")," create and publish two different Docker images, one for the AVS and one for the Plugin.")),(0,r.kt)("h2",{id:"declaring-plugin-source"},"Declaring plugin source"),(0,r.kt)("p",null,"The plugin source is declared in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/packaging/manifest#plugin"},"manifest file")," and could be overridden in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/packaging/profiles#plugin_overrides"},"profile file")," if necessary."),(0,r.kt)("h2",{id:"running-the-plugin"},"Running the plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"eigenlayer plugin [--avs [avs-name]] [plugin-name] [args...]\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)(u,{mdxType:"NotCLIDisclaimer"})),(0,r.kt)("p",null,"When the user runs the plugin, a container is created using the plugin image, and all the arguments specified by the user in the command are appended to the container ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},"ENTRYPOINT"),". The setup tool would run the container plugin instance and waits until it finishes, showing container logs. The exit code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"eigenlayer plugin")," command is the same exit code of the container plugin and will be printed in stdout to end-user knowledge."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--avs")," flag could be used to specify target AVS. Will be required if multiple profiles of the same AVS Node are running. If only one profile runs, the tool will use it as the target."),(0,r.kt)("h2",{id:"accessing-the-avs-nodes"},"Accessing the AVS Nodes"),(0,r.kt)("p",null,"The plugin container will be executed in the same docker network as the AVS Node instance by default. This means that the plugin container will be able to access the AVS Nodes, and it can use the Docker name resolution to access the services using the service names defined in the docker-compose file. It is the responsibility of the Developer to use proper service names and include all the necessary functionalities in the docker-compose file to allow the plugin to do all the actions properly."),(0,r.kt)("p",null,"Functionality to run the plugin container in the host network will be added as well."),(0,r.kt)("h2",{id:"plugin-use-cases"},"Plugin use cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Custom setup"),": The plugin could provide a custom setup for the AVS Node. For example, the AVS Node could provide a plugin to configure a custom database or service."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Admin tasks"),": The plugin could interact with the AVS Node's admin module and perform admin tasks for the AVS Node. For example, the AVS Node could provide a plugin to backup the database, to restore it, or access it and run pruning on it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Smart contract interaction"),": The plugin could interact with EigenLayer smart contracts or the AVS protocol. For example, the AVS Node could provide a plugin to register a new AVS or to update the AVS."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Keystore processing"),": The plugin could process the keystore files and perform actions with them. For example, the AVS Node could provide a plugin to import a keystore file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AVS Node API interaction"),": The plugin could interact with the AVS Node API. For example, the AVS Node could provide a plugin to get the AVS Node status.")),(0,r.kt)("p",null,"The plugin can do a myriad of things, and it is up to the developer to decide what functionalities the plugin will provide. The plugin could be a simple script or a complex application. The plugin could be written in any language, and it is up to the developer to decide what language to use. The only requirement is that the plugin ",(0,r.kt)("strong",{parentName:"p"},"MUST")," be a Docker image that can be run as a container."),(0,r.kt)("p",null,"The plugin can even be a CLI application with a huge list of commands and have logic executed based on the response coming from the commands."))}g.isMDXComponent=!0}}]);