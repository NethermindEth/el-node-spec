"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[620],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||o;return n?i.createElement(m,a(a({ref:t},d),{},{components:n})):i.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={title:"Introduction"},a=void 0,l={unversionedId:"plugin/intro",id:"plugin/intro",title:"Introduction",description:"The plugin system will provide a way to extend the Middleware setup tool with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that a middleware could have. Each middleware could provide a plugin to extend the setup tool with middleware-specific functionalities interacting with the services declared in the docker-compose setup.",source:"@site/docs/plugin/intro.mdx",sourceDirName:"plugin",slug:"/plugin/intro",permalink:"/docs/plugin/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugin/intro.mdx",tags:[],version:"current",frontMatter:{title:"Introduction"},sidebar:"tutorialSidebar",previous:{title:"Plugin",permalink:"/docs/category/plugin"},next:{title:"Keys Management",permalink:"/docs/category/keys-management"}},s={},c=[{value:"Plugin as a Docker image",id:"plugin-as-a-docker-image",level:2},{value:"Declaring plugin source",id:"declaring-plugin-source",level:2},{value:"Running the plugin",id:"running-the-plugin",level:2},{value:"Accessing the middleware services",id:"accessing-the-middleware-services",level:2}],d=(u="NotCLIDisclaimer",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const p={toc:c},g="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The plugin system will provide a way to extend the Middleware setup tool with new functionalities that are not included by default. This is necessary due to the diversity of services and structure that a middleware could have. Each middleware could provide a plugin to extend the setup tool with middleware-specific functionalities interacting with the services declared in the docker-compose setup."),(0,r.kt)("h2",{id:"plugin-as-a-docker-image"},"Plugin as a Docker image"),(0,r.kt)("p",null,"A plugin is a Docker container created from a Docker image provided in the middleware package. The image could be provided following these two options:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Pre-built image"),(0,r.kt)("li",{parentName:"ol"},"Built from a Dockerfile using a Git repository URL")),(0,r.kt)("h2",{id:"declaring-plugin-source"},"Declaring plugin source"),(0,r.kt)("p",null,"The plugin source is declared in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packaging/manifest#plugin"},"manifest file")," and could be overridden in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packaging/profiles#plugin_overrides"},"profile file")," if necessary."),(0,r.kt)("h2",{id:"running-the-plugin"},"Running the plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tool plugin [--middleware [middleware-name]] [plugin-name] [args...]\n")),(0,r.kt)(d,{mdxType:"NotCLIDisclaimer"}),(0,r.kt)("p",null,"When the user runs the plugin, a container is created using the plugin image, and all the arguments specified by the user in the command are appended to the container ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/builder/#entrypoint"},"ENTRYPOINT"),". The setup tool would run the container plugin instance and waits until it finishes, showing container logs. The exit code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tool plugin")," command is the same exit code of the container plugin and will be printed in stdout to end-user knowledge."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--middleware")," flag could be used to specify target middleware. Will be required if multiple profiles of the same middleware are running, if only one profile is running then the tool would use it as the target."),(0,r.kt)("h2",{id:"accessing-the-middleware-services"},"Accessing the middleware services"),(0,r.kt)("p",null,"The plugin container will be executed in the same docker-compose network as the middleware instance. This means that the plugin container will be able to access the middleware services, and it can use the Docker name resolution to access the services using the names of the services defined in the docker-compose file. It is the responsibility of the middleware to use proper service names and includes all the necessary functionalities in the docker-compose file to allow the plugin to do all the actions properly."))}m.isMDXComponent=!0}}]);