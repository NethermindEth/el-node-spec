"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1062],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4,id:"reference"},o="Reference package",l={unversionedId:"spec/packaging/reference",id:"spec/packaging/reference",title:"Reference package",description:"Package structure",source:"@site/docs/spec/packaging/reference.md",sourceDirName:"spec/packaging",slug:"/spec/packaging/reference",permalink:"/docs/spec/packaging/reference",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/spec/packaging/reference.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"reference"},sidebar:"sidebar",previous:{title:"Profile file",permalink:"/docs/spec/packaging/profiles"},next:{title:"Packaging Best Practices",permalink:"/docs/spec/packaging/guidelines"}},s={},p=[{value:"Package structure",id:"package-structure",level:2},{value:"<code>manifest.yml</code>",id:"manifestyml",level:2},{value:"<code>docker-compose.yml</code>",id:"docker-composeyml",level:2},{value:"<code>.env</code>",id:"env",level:2},{value:"<code>profile.yml</code>",id:"profileyml",level:2}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reference-package"},"Reference package"),(0,r.kt)("h2",{id:"package-structure"},"Package structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./\n\u251c\u2500\u2500 profile/\n\u2502   \u251c\u2500\u2500 .env\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u2514\u2500\u2500 profile.yml\n\u2514\u2500\u2500 manifest.yml\n")),(0,r.kt)("h2",{id:"manifestyml"},(0,r.kt)("inlineCode",{parentName:"h2"},"manifest.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "v0.0.1"\nmiddleware_version: "v0.1.0"\nname: sample-avs\nupgrade: required\nhardware_requirements: \n  - min_cpu_cores: 4\n    min_ram: 4096\n    min_free_space: 10240\n    stop_if_requirements_are_not_met: true\nplugin: \n  - image: "your-organization/plugin-service:latest"\nprofiles:\n  - name: "profile"\n')),(0,r.kt)("h2",{id:"docker-composeyml"},(0,r.kt)("inlineCode",{parentName:"h2"},"docker-compose.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\n\nservices:\n  main-service:\n    image: ${MAIN_SERVICE_IMAGE} \n    container_name: ${MAIN_SERVICE_NAME}\n    volumes:\n      - ${KEYSTORE_PATH}:/tmp/main/keys\n    command:\n    - eigen \n    - --flag-x=${X_VALUE}\n    - --node-name=awesome-avs\n    - --keystore-folder=/tmp/main/keys\n    ports:\n      - \"${MAIN_PORT}:8080\"\n    depends_on:\n      - db-service\n    networks:\n      - eigenlayer\n\n  db-service:\n    image: postgres:${DB_IMAGE_TAG}\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_NAME}\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - eigenlayer\n\n  utility-service:\n    image: ${UTILITY_SERVICE_IMAGE}\n    environment:\n      - MAIN_SERVICE_HOST=main-service\n      - MAIN_SERVICE_PORT=8080\n    depends_on:\n      - main-service\n    networks:\n      - eigenlayer\n\nnetworks:\n  eigenlayer:\n    name: ${NETWORK_NAME}\n\nvolumes:\n  db-data:\n    name: ${VOLUME_NAME}\n")),(0,r.kt)("h2",{id:"env"},(0,r.kt)("inlineCode",{parentName:"h2"},".env")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"X_VALUE=value1\nDB_NAME=example_name\n")),(0,r.kt)("h2",{id:"profileyml"},(0,r.kt)("inlineCode",{parentName:"h2"},"profile.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "1.0"\n\noptions:\n  - name: "main-container-image"\n    target: MAIN_SERVICE_IMAGE\n    type: string\n    default: "your-organization/main-service:v1.0.0"\n    validate:\n      re2_regex: "^(?:(?:[a-zA-Z0-9.-]+(?:\\:[0-9]+)?/)?[a-zA-Z0-9_-]+(?:/[a-zA-Z0-9_-]+)?(?:\\:[a-zA-Z0-9_.-]+)?)?$"\n    help: "Main service container docker image"\n  - name: "main-container-name"\n    target: MAIN_SERVICE_NAME\n    type: string\n    default: "main-service"\n    validate:\n      re2_regex: "^[a-zA-Z_-]+$"\n    help: "Main service container name"\n  - name: "keystore-folder-path"\n    target: KEYSTORE_PATH\n    type: path_dir\n    help: "Path to the keystore folder"\n  - name: "flag-x"\n    target: X_VALUE\n    type: select\n    default: "value1"\n    validate:\n      options: ["value1", "value2", "value3"]\n    help: "The flag-x defines X behavior. Possible values are value1, value2, and value3"\n  - name: "main-port"\n    target: MAIN_PORT\n    type: port\n    default: 8080\n    help: "Main service server port"\n  - name: "db-image-tag"\n    target: DB_IMAGE_TAG\n    type: string\n    default: "latest"\n    validate:\n      re2_regex: "^[a-zA-Z]+$"\n    help: "Tag of Postgres docker image"\n  - name: "db-user"\n    target: DB_USER\n    type: str\n    help: "Postgres DB user"\n  - name: "db-password"\n    target: DB_PASSWORD\n    type: str\n    validate:\n      re2_regex: "^[^#]{8,}$"\n    help: "Postgres DB user password. Must have at least 8 characters and it can\'t contain the \'#\' symbol"\n  - name: "utility-container-image"\n    target: UTILITY_SERVICE_IMAGE\n    type: string\n    default: "your-organization/utility-service:v1.0.0"\n    validate:\n      re2_regex: "^(?:(?:[a-zA-Z0-9.-]+(?:\\:[0-9]+)?/)?[a-zA-Z0-9_-]+(?:/[a-zA-Z0-9_-]+)?(?:\\:[a-zA-Z0-9_.-]+)?)?$"\n    help: "Utility service container docker image"\n  - name: "network-name"\n    target: NETWORK_NAME\n    type: str\n    default: eigenlayer\n    help: "Docker network name"\n  - name: "volume-name"\n    target: VOLUME_NAME\n    type: str\n    default: db-data\n    help: "Docker volume name for Postgres DB"\n\nmonitoring:\n  targets:\n    - service: main-service\n      port: 9000\n      path: /metrics\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"flag-x")," is present in the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," (",(0,r.kt)("inlineCode",{parentName:"p"},"X_VALUE")," var) and the reference file but without a default value. In this case, if the user doesn\u2019t provide a value using the flag (for the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/avs-setup-wizard"},"AVS setup wizard tool"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," value will be used.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is strongly recommended to put any docker images as profile options. In this reference a ",(0,r.kt)("inlineCode",{parentName:"p"},"validate.re2_regex")," is provided to validate docker image names. Notice that for the Postgres docker image, the name is fixed but the tag is used as a profile option, this is a recommended practice as well.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Notice the usage of the profile option type ",(0,r.kt)("inlineCode",{parentName:"p"},"path_dir")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"KEYSTORE_PATH")," env variable. Any path option should be used similarly.")))}d.isMDXComponent=!0}}]);