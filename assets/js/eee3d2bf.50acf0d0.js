"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[284],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>V,contentTitle:()=>P,default:()=>O,frontMatter:()=>w,metadata:()=>S,toc:()=>x});var r=n(7462),a=n(7294),s=n(3905),i=n(6010),o=n(2466),l=n(6550),p=n(1980),u=n(7392),c=n(12);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function v(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,p._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=m(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[l,p]=v({queryString:n,groupId:r}),[u,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:r}),g=(()=>{const e=l??u;return h({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),d(e)}),[p,d,s]),tabValues:s}}var f=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=p[n].value;r!==s&&(c(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=g(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}const I={tabItem:"tabItem_Ymn6"};function E(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(I.tabItem,r),hidden:n},t)}const w={sidebar_position:1,id:"api"},P="AVS Node API",S={unversionedId:"spec/api/api",id:"spec/api/api",title:"AVS Node API",description:"The AVS Node HTTP RESTful API provides a common interface for Nodes designed for the EigenLayer protocol.",source:"@site/docs/spec/api/api.mdx",sourceDirName:"spec/api",slug:"/spec/api/",permalink:"/docs/spec/api/",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/spec/api/api.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"api"},sidebar:"sidebar",previous:{title:"AVS Node API",permalink:"/docs/category/avs-node-api"},next:{title:"Implementation reference",permalink:"/docs/spec/api/api-examples"}},V={},x=[{value:"Base URL",id:"base-url",level:2},{value:"API Versioning",id:"api-versioning",level:2},{value:"Node",id:"node",level:2},{value:"GET /eigen/node",id:"get-eigennode",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Responses",id:"responses",level:4},{value:"GET /eigen/node/health",id:"get-eigennodehealth",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Responses",id:"responses-1",level:4},{value:"GET /eigen/node/services",id:"get-eigennodeservices",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Responses",id:"responses-2",level:4},{value:"GET /eigen/node/services/{service_ID}/health",id:"get-eigennodeservicesservice_idhealth",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Responses",id:"responses-3",level:4}],A={toc:x},j="wrapper";function O(e){let{components:t,...n}=e;return(0,s.kt)(j,(0,r.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"avs-node-api"},"AVS Node API"),(0,s.kt)("p",null,"The AVS Node HTTP RESTful API provides a common interface for Nodes designed for the EigenLayer protocol."),(0,s.kt)("h2",{id:"base-url"},"Base URL"),(0,s.kt)("p",null,"The base URL for the API is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"/eigen\n")),(0,s.kt)("h2",{id:"api-versioning"},"API Versioning"),(0,s.kt)("p",null,"This document describes the AVS Node API version ",(0,s.kt)("inlineCode",{parentName:"p"},"v0.0.1"),". The API version follows the same Eigenlayer AVS Node specification version."),(0,s.kt)("p",null,"The API version can be included in the query string as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"/eigen/endpoint?version=0.0.2\n")),(0,s.kt)("p",null,"In case of handling a request without the version query parameter, the API will respond with the latest version of the API."),(0,s.kt)("p",null,"If the requested version is not supported, the API will respond with a 404 Not Found error and the following message:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "API version not found"\n}\n')),(0,s.kt)("h2",{id:"node"},"Node"),(0,s.kt)("p",null,"Endpoints to query Node related information."),(0,s.kt)("h3",{id:"get-eigennode"},"GET /eigen/node"),(0,s.kt)("p",null,"Provides AVS Node and API identity information in a format similar to ",(0,s.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7231#section-5.5.3"},"HTTP User-Agent"),"."),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,"No parameters"),(0,s.kt)("h4",{id:"responses"},"Responses"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"200")," - Request successful"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Content-Type:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"application/json")),(0,s.kt)(T,{mdxType:"Tabs"},(0,s.kt)(E,{value:"example",label:"Example Value",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "node_name": "EigenLayer-AVS",\n  "spec_version": "v0.0.1",\n  "node_version": "v1.0.0"\n}\n'))),(0,s.kt)(E,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "node_name": {\n      "type": "string",\n      "description": "Name of the node"\n    },\n    "spec_version": {\n      "type": "string",\n      "description": "AVS Specification version"\n    },\n    "node_version": {\n      "type": "string",\n      "description": "Version of the node"\n    }\n  },\n  "required": [\n    "node_name",\n    "spec_version",\n    "node_version"\n  ]\n}\n')))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"500")," - Internal server error"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Content-Type:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"application/json")),(0,s.kt)(T,{mdxType:"Tabs"},(0,s.kt)(E,{value:"example",label:"Example Value",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Internal server error"\n}\n'))),(0,s.kt)(E,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "message": {\n      "type": "string",\n      "description": "Error message"\n    }\n  },\n  "required": [\n    "message"\n  ]\n}\n')))),(0,s.kt)("h3",{id:"get-eigennodehealth"},"GET /eigen/node/health"),(0,s.kt)("p",null,"Returns AVS Node health status in HTTP status codes."),(0,s.kt)("h4",{id:"parameters-1"},"Parameters"),(0,s.kt)("p",null,"No parameters"),(0,s.kt)("h4",{id:"responses-1"},"Responses"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"200")," - AVS Node is healthy"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"206")," - AVS Node is partially healthy. It is either initializing or some backing services are not healthy."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"503")," - AVS Node is unhealthy or having issues."),(0,s.kt)("h3",{id:"get-eigennodeservices"},"GET /eigen/node/services"),(0,s.kt)("p",null,"Returns a list of all backing services that are currently registered with the AVS Node setup. Useful to determine if a service is currently registered with the AVS Node and to get the service ID for health endpoint."),(0,s.kt)("h4",{id:"parameters-2"},"Parameters"),(0,s.kt)("p",null,"No parameters"),(0,s.kt)("h4",{id:"responses-2"},"Responses"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"200")," - Request successful"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Content-Type:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"application/json")),(0,s.kt)(T,{mdxType:"Tabs"},(0,s.kt)(E,{value:"example",label:"Example Value",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "services": [\n    {\n      "id": "db-1",\n      "name": "Database",\n      "description": "Database description",\n      "status": "Up",\n    },\n    {\n      "id": "idx-2",\n      "name": "Indexer",\n      "description": "Indexer description",\n      "status": "Down",\n    }\n  ]\n}\n'))),(0,s.kt)(E,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "services": {\n      "type": "array",\n      "description": "List of backing services",\n      "items": {\n        "type": "object",\n        "properties": {\n          "id": {\n            "type": "string",\n            "description": "Service ID"\n          },\n          "name": {\n            "type": "string",\n            "description": "Service name"\n          },\n          "description": {\n            "type": "string",\n            "description": "Service description"\n          },\n          "status": {\n            "type": "string",\n            "description": "Service status. Possible values are Up, Down, or Initializing."\n\n          }\n        },\n        "required": [\n          "id",\n          "name",\n          "description"\n        ]\n      }\n    }\n  },\n  "required": [\n    "services"\n  ]\n}\n')))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"500")," - Internal server error"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Content-Type:")," ",(0,s.kt)("inlineCode",{parentName:"p"},"application/json")),(0,s.kt)(T,{mdxType:"Tabs"},(0,s.kt)(E,{value:"example",label:"Example Value",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Internal server error"\n}\n'))),(0,s.kt)(E,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "properties": {\n    "message": {\n      "type": "string",\n      "description": "Error message"\n    }\n  },\n  "required": [\n    "message"\n  ]\n}\n')))),(0,s.kt)("h3",{id:"get-eigennodeservicesservice_idhealth"},"GET /eigen/node/services/{service_ID}/health"),(0,s.kt)("p",null,"Returns the health status of the given service in HTTP status codes. The service ID is the service ID returned by the ",(0,s.kt)("inlineCode",{parentName:"p"},"/eigen/services")," endpoint. The service is considered healthy if the service is registered with the AVS Node and the service is currently online."),(0,s.kt)("h4",{id:"parameters-3"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"service_ID")," ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," ",(0,s.kt)("inlineCode",{parentName:"p"},"(path)")," - Service ID"),(0,s.kt)("h4",{id:"responses-3"},"Responses"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"200")," - Backing service is healthy"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"206")," - Backing service is partially healthy. It is either initializing or not ready yet."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"503")," - Backing service is unhealthy or having issues."))}O.isMDXComponent=!0}}]);