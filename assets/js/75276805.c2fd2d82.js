"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7871],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return t?i.createElement(g,a(a({ref:n},c),{},{components:t})):i.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:r,a[1]=o;for(var p=2;p<s;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3019:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));const s={sidebar_position:3,id:"metrics-examples"},a="Implementation reference",o={unversionedId:"metrics/metrics-examples",id:"metrics/metrics-examples",title:"Implementation reference",description:"This guide is intended to showcase the practical application of monitoring APIs and Prometheus metrics using authentic examples. Examples used are:",source:"@site/docs/metrics/metrics-examples.md",sourceDirName:"metrics",slug:"/metrics/metrics-examples",permalink:"/docs/metrics/metrics-examples",draft:!1,editUrl:"https://github.com/NethermindEth/el-node-spec/edit/main/docs/docs/metrics/metrics-examples.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"metrics-examples"},sidebar:"sidebar",previous:{title:"Prometheus Metrics Specification",permalink:"/docs/metrics/metrics-prom-spec"},next:{title:"Monitoring Stack",permalink:"/docs/category/monitoring-stack"}},l={},p=[{value:"EigenDA Example",id:"eigenda-example",level:2},{value:"HTTP Monitoring API",id:"http-monitoring-api",level:3},{value:"GET /eigen/node/spec-version",id:"get-eigennodespec-version",level:4},{value:"Response",id:"response",level:4},{value:"GET /eigen/node/version",id:"get-eigennodeversion",level:4},{value:"Response",id:"response-1",level:4},{value:"GET /eigen/node/health",id:"get-eigennodehealth",level:4},{value:"Response",id:"response-2",level:4},{value:"GET /eigen/node/services",id:"get-eigennodeservices",level:4},{value:"Response",id:"response-3",level:3},{value:"GET /eigen/node/services/graph-node-da/health",id:"get-eigennodeservicesgraph-node-dahealth",level:4},{value:"Response",id:"response-4",level:4},{value:"GET /eigen/node/services/ipfs-da/health",id:"get-eigennodeservicesipfs-dahealth",level:4},{value:"Response",id:"response-5",level:4},{value:"GET /eigen/node/services/postgres-da/health",id:"get-eigennodeservicespostgres-dahealth",level:4},{value:"Response",id:"response-6",level:4},{value:"Prometheus Metrics",id:"prometheus-metrics",level:3},{value:"Economics metrics",id:"economics-metrics",level:4},{value:"Metadata metrics",id:"metadata-metrics",level:4},{value:"Perfomance metrics",id:"perfomance-metrics",level:4},{value:"RPC metrics",id:"rpc-metrics",level:4}],c={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"implementation-reference"},"Implementation reference"),(0,r.kt)("p",null,"This guide is intended to showcase the practical application of monitoring APIs and Prometheus metrics using authentic examples. Examples used are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"EigenDA")),(0,r.kt)("p",null,"Some metrics and endpoints are very straightforward, but having a reference for the responses and labels can be helpful."),(0,r.kt)("h2",{id:"eigenda-example"},"EigenDA Example"),(0,r.kt)("h3",{id:"http-monitoring-api"},"HTTP Monitoring API"),(0,r.kt)("h4",{id:"get-eigennodespec-version"},"GET /eigen/node/spec-version"),(0,r.kt)("h4",{id:"response"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "api_version": "v1.0.0"\n}\n')),(0,r.kt)("h4",{id:"get-eigennodeversion"},"GET /eigen/node/version"),(0,r.kt)("h4",{id:"response-1"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "version": "EigenDA-AVS/v1.0.0"\n}\n')),(0,r.kt)("h4",{id:"get-eigennodehealth"},"GET /eigen/node/health"),(0,r.kt)("h4",{id:"response-2"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"200 OK\n")),(0,r.kt)("h4",{id:"get-eigennodeservices"},"GET /eigen/node/services"),(0,r.kt)("h3",{id:"response-3"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "services": [\n    {\n      "id": "graph-node-da",\n      "name": "graph-node",\n      "description": "Indexer graph node description",\n      "status": "Up",\n    },\n    {\n      "id": "ipfs-da",\n      "name": "ipfs",\n      "description": "ipfs instance description",\n      "status": "Down",\n    },\n    {\n      "id": "postgres-da",\n      "name": "postgres",\n      "description": "Postgres DB description",\n      "status": "Initializing",\n    }\n  ]\n}\n')),(0,r.kt)("h4",{id:"get-eigennodeservicesgraph-node-dahealth"},"GET /eigen/node/services/graph-node-da/health"),(0,r.kt)("h4",{id:"response-4"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"200 OK\n")),(0,r.kt)("h4",{id:"get-eigennodeservicesipfs-dahealth"},"GET /eigen/node/services/ipfs-da/health"),(0,r.kt)("h4",{id:"response-5"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"206 Partial Content\n")),(0,r.kt)("h4",{id:"get-eigennodeservicespostgres-dahealth"},"GET /eigen/node/services/postgres-da/health"),(0,r.kt)("h4",{id:"response-6"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"503 Service Unavailable\n")),(0,r.kt)("h3",{id:"prometheus-metrics"},"Prometheus Metrics"),(0,r.kt)("h4",{id:"economics-metrics"},"Economics metrics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_fees_earned_total{avs_name="EigenDA", token="ETH"}')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_slashing_incurred_total{avs_name="EigenDA", token="ETH"}')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_total_balance_total{avs_name="EigenDA", token="ETH"}'))),(0,r.kt)("h4",{id:"metadata-metrics"},"Metadata metrics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_version{avs_name="EigenDA", commit="120f4c8db352845f93b0e86a46b5f807297e4ac3", runtime="Go 1.19.0", version="1.0.0"}'))),(0,r.kt)("h4",{id:"perfomance-metrics"},"Perfomance metrics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_performance_score{avs_name="EigenDA"}'))),(0,r.kt)("h4",{id:"rpc-metrics"},"RPC metrics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_rpc_request_duration_seconds{avs_name="EigenDA", method="eth_getBlockByNumber", client="nethermind", version="1.17.2"}')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'eigen_rpc_request_total{avs_name="EigenDA", method="eth_estimateGas", client="nethermind", version="1.17.2"}'))))}m.isMDXComponent=!0}}]);